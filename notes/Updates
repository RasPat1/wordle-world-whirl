# Updates

It's 4:30am on Jan 5th. 
I've gotten a working version of what we set out to do. yay.
Unfortunately, it's slow. Too slow. This is expected since we're in a triple loop or a dictionary of 2k-14k words.
I'll do some profiling and see what I can do here.

Performace optimizations
For a dictionary of 168 words it takes about 22 seconds. That is a disaster.
21890232 it has 21 million calls to a lmbda that sets a value to 0 lol.

Removed the lambda and we're down to 15 seconds. Cool.

Ideas... we can add a cache for a diff result for a pair of words.
This will use a lot of memeory O(n^2). But I think that'll be okay. Maybe a gig right?

Sweeet we're down to 2.4 seconds for a dictionary of 168. Let's double the dictionary and see where we get to.


Upped to a dictonary of 374 words. Time went back up to 22 seconds lol. Well okay.

52453500 calls to get_diff_result
139876 calls to get_score

hmm. I feel like all the time is just function call time. Not "work" time.

What if I try and in-line one of the functions.
I inlined everything and it takes about 24 seconds...

Okay so I took the cache computation and put it outside of the function. Thereby stopping all the non-unique function calls. It cut it in half. We basically saved 50 million function calls. I'm surprised that worked.  But okay.  Let's go ahead and commit that.
Okay down to 6.4 seconds for a dictionary of 374.
139876 calls to get_diff_result That's 374^2 so cool. We're scaling n^2 with dictioary size their.
We also have 139876 calls to score. What can we do about that?

Next idea is to try and cache a score.

Okay!
I added a basic score cache and we're down to 1.3 seconds for a dictionary of 374. Ah that's because it's broken now. got it got it.
Okay we're back.
1.67s at a dict size of 374.
279378 calls to get_diff_result. Which is 2*n^2.

Hmm.. Part of me thinks I might be getting differnt results....
I am getting different results.

A dictionary of 678 in 6.4s  SO it does look like we're squarely in n^2 time. Get it...

Let's fix up these tests to make sure we didn't break anythign.
The results are still plausible but somethign has changed I think.


Tests are fixed up and I think the code is workign again.
Current results
[('crate', 657.7610619469026), ('trace', 656.7699115044247), ('atone', 656.740412979351), ('alone', 656.7256637168142), ('arise', 656.6961651917404), ('cater', 655.6755162241888), ('react', 654.9439528023598), ('store', 654.6873156342183), ('stale', 654.637168141593), ('grate', 654.2300884955753), ('solar', 653.4837758112094), ('heart', 653.4365781710915), ('saute', 653.1563421828909), ('scare', 652.976401179941), ('alien', 652.7138643067847), ('trice', 652.6607669616519), ('canoe', 652.1710914454277), ('loser', 652.1504424778761), ('great', 651.9115044247787), ('lance', 651.7699115044247)]
Dictionary Size: 678
.
----------------------------------------------------------------------
Ran 1 test in 14.440s

I keep doing this "upstream" cache technique that I hate but apparently saves a lot of time.
If you check the cache before calling the function then you save a ton of function calls. It seems sloppy though.  It theoretically shouldn't save this much time. The code is equivalent. I think there's somethign subtle happening here that I don't totally understand. To me it just seems liek avoidgin all these "expensive" function calls. But inlining the function didn't seem to help. So wtf right? there's is something I'm missing.


Okay so i'm at 16.1 seconds with a dictionary of 678.

I'm not sure what happened. If I lost progress or if the timing I had before was based off of a broken implementation.

I dont' want to start using heuristic shortcuts yet but I don't see that many other options.
* Better Match representation allows for deduping at the cost of constructing a more complicated object.  There should be no loss of precision when doing this.
Profiling shows most time spent in get_score_impl
There are 45k calls to it and it makes 920k calls to the differ.
We have the same number of calls to get_score and get_score_impl. Looks like the "upstreaming" is in place.
  * Why are there not the same number of calls between get_diff and get_diff_impl?


➜  python src/wordle.py
[('crate', 657.7610619469026), ('trace', 656.7699115044247), ('atone', 656.740412979351), ('alone', 656.7256637168142), ('arise', 656.6961651917404), ('cater', 655.6755162241888), ('react', 654.9439528023598), ('store', 654.6873156342183), ('stale', 654.637168141593), ('grate', 654.2300884955753), ('solar', 653.4837758112094), ('heart', 653.4365781710915), ('saute', 653.1563421828909), ('scare', 652.976401179941), ('alien', 652.7138643067847), ('trice', 652.6607669616519), ('canoe', 652.1710914454277), ('loser', 652.1504424778761), ('great', 651.9115044247787), ('lance', 651.7699115044247)]
Dictionary Size: 678
Score Cache Size: 45493
Solution Cache Size: 459684
         9521243 function calls (9521231 primitive calls) in 13.514 seconds


We can do a much larger dictionary than I thought! The first solution takes forever, but the caching actually makes the rest of it ezpz.
----
➜  python src/wordle.py
Dictionary Size: 1349
Solutions Searched:  0 07:38:15
Guesses Searched:  0
Solutions Searched:  0 07:38:20
Guesses Searched:  417
Solutions Searched:  0 07:38:25
Guesses Searched:  835
Solutions Searched:  0 07:38:30
Guesses Searched:  1258
Solutions Searched:  8 07:38:35
Guesses Searched:  1132
Solutions Searched:  25 07:38:40
Guesses Searched:  921
Solutions Searched:  51 07:38:45
Guesses Searched:  618
Solutions Searched:  88 07:38:50
Guesses Searched:  790
Solutions Searched:  137 07:38:55
Solutions Searched:  202 07:39:00
Solutions Searched:  286 07:39:05
Solutions Searched:  393 07:39:10
Solutions Searched:  538 07:39:15
Solutions Searched:  714 07:39:20
Solutions Searched:  934 07:39:25
Solutions Searched:  1169 07:39:30
[('irate', 1311.9733135656043), ('arise', 1311.3654558932542), ('arose', 1310.858413639733), ('later', 1308.7368421052631), ('crate', 1307.362490733877), ('slate', 1306.5426241660489), ('snare', 1306.3187546330614), ('trace', 1306.0266864343957), ('alone', 1305.9629355077836), ('stare', 1305.948109710897), ('atone', 1304.9444032616752), ('stale', 1304.547071905115), ('learn', 1304.0237212750185), ('cater', 1302.7620459599702), ('renal', 1302.1200889547813), ('react', 1302.1052631578948), ('scare', 1301.8799110452187), ('solar', 1301.8413639733135), ('trade', 1301.6723498888066), ('least', 1301.5522609340253)]
Score Cache Size: 110443
Solution Cache Size: 1819801
         37458294 function calls (37458282 primitive calls) in 79.565 seconds

