# Given a guess, a guess-diff, and a solution dictionary
# Find the optimal next guess.

from scorer import Scorer
from differ import Differ
from guesser import Guesser
from profiler import ProfilerFactory


class Filter:

  def get_best_next_guess(self, guess, guess_diff, solution_corpus, full_corpus):
    # Filter the dictionary based on the existing guess and guess_diff
    # Now you have the possible solutions.
    # Then use the possible solutions as your new solution dictionary. What is the best word for that dictionary?

    filtered_solution_corpus = Scorer.reduce_corpus(
        guess, guess_diff, solution_corpus)

    profiler = ProfilerFactory.getProfiler(False)

    ranked_guesses = Guesser.get_best_guesses(
        filtered_solution_corpus, full_corpus, {}, {}, profiler)

    print(ranked_guesses)

    return ranked_guesses[0][0]


# This is not exactly optimal since our new guess only knows what words are left not all the information that was generated by the first guess. It may use a letter that we already rules out in the first step.  We need a better representation for that. Anyways keep going.
